{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pvnl0\\\\Desktop\\\\Cuvette\\\\Quiz App\\\\quiz-app-frontend\\\\src\\\\components\\\\LiveQuizInterface\\\\LiveQuizInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport CompletedQuiz from \"./CompletedQuiz\";\nimport styles from \"./LiveQuizInterface.module.css\";\nimport styles1 from \"../CommonStyles.module.css\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LiveQuizInterface() {\n  _s();\n  const {\n    quizId\n  } = useParams();\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const [timer, setTimer] = useState(null);\n  const [timerActive, setTimerActive] = useState(false);\n  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(null);\n  const [impressions, setImpressions] = useState(0);\n  const baseUrl = localStorage.getItem(\"baseUrl\");\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    axios.get(`${baseUrl}getQuizById/${quizId}`).then(response => {\n      const {\n        quiz\n      } = response.data;\n      setQuiz(quiz);\n      setImpressions(quiz.impressions);\n      setLoading(true);\n    }).catch(error => {\n      console.log(error);\n    });\n    // eslint-disable-next-line\n  }, [quizId]);\n\n  //Impressions Updation\n  useEffect(() => {\n    setImpressions(prevImpressions => prevImpressions + 1);\n    axios.patch(`${baseUrl}impressionsUpdation/${quizId}`, {\n      impressions: impressions + 1\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n    // eslint-disable-next-line\n  }, []);\n  const handleNextOrSubmitQna = () => {\n    // Check if the quiz is already completed, if so, return\n    if (quizCompleted) {\n      return;\n    }\n    let peopleAnsweredCorrectly = 0;\n    let peopleAnsweredIncorrectly = 0;\n\n    // If there are more questions to go through\n    if (currentQuestionIndex < quiz.questionsArray.length - 1) {\n      const currentQuestion = quiz.questionsArray[currentQuestionIndex];\n\n      // If an option is selected for the current question\n      if (selectedOptionIndex !== null) {\n        // Check if the selected option is correct\n        if (currentQuestion.correctAnswer === selectedOptionIndex + 1) {\n          // If the timer is not active, increment the correct answer count\n          if (!timerActive) {\n            setCorrectAnswersCount(prevCount => prevCount + 1);\n            peopleAnsweredCorrectly = 1;\n          } else {\n            peopleAnsweredIncorrectly = 1;\n          }\n        } else {\n          // If the selected option is incorrect, mark as incorrectly answered\n          peopleAnsweredIncorrectly = 1;\n        }\n      } else {\n        // If no option is selected, mark as incorrectly answered\n        peopleAnsweredIncorrectly = 1;\n      }\n\n      // Move to the next question\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    } else {\n      // If it's the last question\n      if (selectedOptionIndex !== null) {\n        const currentQuestion = quiz.questionsArray[currentQuestionIndex];\n        // Check if the selected option is correct\n        if (currentQuestion.correctAnswer === selectedOptionIndex + 1) {\n          // If the timer is not active, increment the correct answer count\n          if (!timerActive) {\n            setCorrectAnswersCount(prevCount => prevCount + 1);\n            peopleAnsweredCorrectly = 1;\n          } else {\n            peopleAnsweredIncorrectly = 1;\n          }\n        } else {\n          // If the selected option is incorrect, mark as incorrectly answered\n          peopleAnsweredIncorrectly = 1;\n        }\n      } else {\n        // If no option is selected, mark as incorrectly answered\n        peopleAnsweredIncorrectly = 1;\n      }\n\n      // Set quiz as completed\n      setQuizCompleted(true);\n    }\n\n    // Reset selected option index\n    setSelectedOptionIndex(null);\n\n    // Send axios patch request to update question data\n    axios.patch(`${baseUrl}questionsUpdation/${quiz._id}/${quiz.questionsArray[currentQuestionIndex]._id}`, {\n      peopleAnsweredCorrectly,\n      peopleAnsweredIncorrectly\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      if (error.response && error.response.data && error.response.data.error) {\n        console.log(error);\n      }\n    });\n  };\n  const handleNextOrSubmitPoll = () => {\n    if (quizCompleted) {\n      return;\n    }\n    let peopleAnsweredOption1 = 0;\n    let peopleAnsweredOption2 = 0;\n    let peopleAnsweredOption3 = 0;\n    let peopleAnsweredOption4 = 0;\n    if (selectedOptionIndex === 0) {\n      peopleAnsweredOption1 = 1;\n    }\n    if (selectedOptionIndex === 1) {\n      peopleAnsweredOption2 = 1;\n    }\n    if (selectedOptionIndex === 2) {\n      peopleAnsweredOption3 = 1;\n    }\n    if (selectedOptionIndex === 3) {\n      peopleAnsweredOption4 = 1;\n    }\n    setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    const baseUrl = localStorage.getItem(\"baseUrl\");\n    axios.patch(`${baseUrl}questionsUpdation/${quiz._id}/${quiz.questionsArray[currentQuestionIndex]._id}`, {\n      peopleAnsweredOption1,\n      peopleAnsweredOption2,\n      peopleAnsweredOption3,\n      peopleAnsweredOption4\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      if (error.response && error.response.data && error.response.data.error) {\n        console.log(error);\n      }\n    });\n    setSelectedOptionIndex(null);\n    // If its last question\n    if (currentQuestionIndex === quiz.questionsArray.length - 1) {\n      setQuizCompleted(true);\n    }\n  };\n  useEffect(() => {\n    // Set up a timer interval\n    // setInterval: This function sets up a recurring timer interval. It takes a \n    // callback function and a duration in milliseconds.\n    const timerInterval = setInterval(() => {\n      // Update the timer state\n      setTimer(prevTimer => {\n        if (prevTimer > 0) {\n          // If the timer is greater than 0, decrement it by 1\n          return prevTimer - 1;\n        } else {\n          // If the timer reaches 0, set the timer active state to true\n          setTimerActive(true);\n          // Call handleNextOrSubmitQna function to move to the next question or submit the quiz\n          handleNextOrSubmitQna();\n          return 0;\n        }\n      });\n    }, 1000); // Update the timer every second\n\n    // Clean up function\n    return () => {\n      // Clear the timer interval\n      clearInterval(timerInterval);\n      // Set the timer active state to false\n      setTimerActive(false);\n    };\n    // This ensures that the effect runs when any of these values change\n    // eslint-disable-next-line\n  }, [timer, currentQuestionIndex, quizCompleted]);\n  useEffect(() => {\n    if (quiz && quiz.questionsArray && quiz.questionsArray.length > 0) {\n      setTimer(quiz.timer === \"5 sec\" ? 5 : quiz.timer === \"10 sec\" ? 10 : quiz.timer === \"OFF\" || quiz.type === \"Poll Type\" ? Infinity : 0);\n    }\n  }, [currentQuestionIndex, quiz]);\n  const handleOptionSelect = index => {\n    setSelectedOptionIndex(index);\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Please Wait to load the Quiz !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this);\n  }\n  if (quizCompleted) {\n    return /*#__PURE__*/_jsxDEV(CompletedQuiz, {\n      type: quiz.type,\n      correctAnswer: correctAnswersCount,\n      totalQuestions: quiz.questionsArray.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.box,\n      children: quiz && quiz.questionsArray && quiz.questionsArray.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.section1,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.questionNo,\n            children: [\"0\", currentQuestionIndex + 1, \"/0\", quiz.questionsArray.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), quiz.timer !== \"OFF\" && quiz.type !== \"Poll Type\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.timer,\n            children: [\"00:\", timer < 10 ? `0${timer}` : timer, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.section2,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.question,\n            children: quiz.questionsArray[currentQuestionIndex].question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.section3,\n          children: quiz.questionsArray[currentQuestionIndex].optionValues.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleOptionSelect(index),\n            style: {\n              border: selectedOptionIndex === index ? \"4px solid #5076FF\" : \"\"\n            },\n            className: quiz.questionsArray[currentQuestionIndex].optionType === \"Text\" ? styles.optionBoxText : quiz.questionsArray[currentQuestionIndex].optionType === \"ImageUrl\" ? styles.optionTypeImage : quiz.questionsArray[currentQuestionIndex].optionType === \"TextAndImageUrl\" ? styles.optionTextAndImage : \"\",\n            children: [quiz.questionsArray[currentQuestionIndex].optionType === \"Text\" && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: styles.textType,\n              children: [\" \", option.value]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 23\n            }, this), quiz.questionsArray[currentQuestionIndex].optionType === \"ImageUrl\" && /*#__PURE__*/_jsxDEV(\"img\", {\n              className: styles.imageType,\n              src: option.imageUrl,\n              alt: \"optionImage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 23\n            }, this), quiz.questionsArray[currentQuestionIndex].optionType === \"TextAndImageUrl\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.thirdType,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: styles.thirdTypeText,\n                children: option.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                className: styles.thirdTypeImage,\n                src: option.imageUrl,\n                alt: \"optionImage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.section4,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (quiz.type === \"Poll Type\") {\n                handleNextOrSubmitPoll();\n              } else {\n                handleNextOrSubmitQna();\n              }\n            },\n            className: styles.nextBtn,\n            children: currentQuestionIndex < quiz.questionsArray.length - 1 ? \"NEXT\" : \"SUBMIT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveQuizInterface, \"OXQKAI0IvbrZYm8tdcklW3ezESI=\", false, function () {\n  return [useParams];\n});\n_c = LiveQuizInterface;\nexport default LiveQuizInterface;\nvar _c;\n$RefreshReg$(_c, \"LiveQuizInterface\");","map":{"version":3,"names":["React","useState","useEffect","useParams","axios","CompletedQuiz","styles","styles1","ClipLoader","jsxDEV","_jsxDEV","LiveQuizInterface","_s","quizId","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","quizCompleted","setQuizCompleted","timer","setTimer","timerActive","setTimerActive","correctAnswersCount","setCorrectAnswersCount","selectedOptionIndex","setSelectedOptionIndex","impressions","setImpressions","baseUrl","localStorage","getItem","loading","setLoading","get","then","response","data","catch","error","console","log","prevImpressions","patch","handleNextOrSubmitQna","peopleAnsweredCorrectly","peopleAnsweredIncorrectly","questionsArray","length","currentQuestion","correctAnswer","prevCount","prevIndex","_id","handleNextOrSubmitPoll","peopleAnsweredOption1","peopleAnsweredOption2","peopleAnsweredOption3","peopleAnsweredOption4","timerInterval","setInterval","prevTimer","clearInterval","type","Infinity","handleOptionSelect","index","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","className","container","box","section1","questionNo","section2","question","section3","optionValues","map","option","onClick","border","optionType","optionBoxText","optionTypeImage","optionTextAndImage","textType","value","imageType","src","imageUrl","alt","thirdType","thirdTypeText","thirdTypeImage","section4","nextBtn","_c","$RefreshReg$"],"sources":["C:/Users/pvnl0/Desktop/Cuvette/Quiz App/quiz-app-frontend/src/components/LiveQuizInterface/LiveQuizInterface.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport CompletedQuiz from \"./CompletedQuiz\";\r\nimport styles from \"./LiveQuizInterface.module.css\";\r\nimport styles1 from \"../CommonStyles.module.css\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nfunction LiveQuizInterface() {\r\n  const { quizId } = useParams();\r\n\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [quizCompleted, setQuizCompleted] = useState(false);\r\n  const [timer, setTimer] = useState(null);\r\n  const [timerActive, setTimerActive] = useState(false);\r\n\r\n  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(null);\r\n\r\n  const [impressions, setImpressions] = useState(0);\r\n\r\n  const baseUrl = localStorage.getItem(\"baseUrl\");\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${baseUrl}getQuizById/${quizId}`)\r\n      .then((response) => {\r\n        const { quiz } = response.data;\r\n        setQuiz(quiz);\r\n        setImpressions(quiz.impressions);\r\n        setLoading(true);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    // eslint-disable-next-line\r\n  }, [quizId]);\r\n\r\n  //Impressions Updation\r\n  useEffect(() => {\r\n    setImpressions((prevImpressions) => prevImpressions + 1);\r\n    axios\r\n      .patch(`${baseUrl}impressionsUpdation/${quizId}`, {\r\n        impressions: impressions + 1,\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleNextOrSubmitQna = () => {\r\n    // Check if the quiz is already completed, if so, return\r\n    if (quizCompleted) {\r\n      return;\r\n    }\r\n  \r\n    let peopleAnsweredCorrectly = 0;\r\n    let peopleAnsweredIncorrectly = 0;\r\n  \r\n    // If there are more questions to go through\r\n    if (currentQuestionIndex < quiz.questionsArray.length - 1) {\r\n      const currentQuestion = quiz.questionsArray[currentQuestionIndex];\r\n  \r\n      // If an option is selected for the current question\r\n      if (selectedOptionIndex !== null) {\r\n        // Check if the selected option is correct\r\n        if (currentQuestion.correctAnswer === selectedOptionIndex + 1) {\r\n          // If the timer is not active, increment the correct answer count\r\n          if (!timerActive) {\r\n            setCorrectAnswersCount((prevCount) => prevCount + 1);\r\n            peopleAnsweredCorrectly = 1;\r\n          } else {\r\n            peopleAnsweredIncorrectly = 1;\r\n          }\r\n        } else {\r\n          // If the selected option is incorrect, mark as incorrectly answered\r\n          peopleAnsweredIncorrectly = 1;\r\n        }\r\n      } else {\r\n        // If no option is selected, mark as incorrectly answered\r\n        peopleAnsweredIncorrectly = 1;\r\n      }\r\n  \r\n      // Move to the next question\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n    } else {\r\n      // If it's the last question\r\n      if (selectedOptionIndex !== null) {\r\n        const currentQuestion = quiz.questionsArray[currentQuestionIndex];\r\n        // Check if the selected option is correct\r\n        if (currentQuestion.correctAnswer === selectedOptionIndex + 1) {\r\n          // If the timer is not active, increment the correct answer count\r\n          if (!timerActive) {\r\n            setCorrectAnswersCount((prevCount) => prevCount + 1);\r\n            peopleAnsweredCorrectly = 1;\r\n          } else {\r\n            peopleAnsweredIncorrectly = 1;\r\n          }\r\n        } else {\r\n          // If the selected option is incorrect, mark as incorrectly answered\r\n          peopleAnsweredIncorrectly = 1;\r\n        }\r\n      } else {\r\n        // If no option is selected, mark as incorrectly answered\r\n        peopleAnsweredIncorrectly = 1;\r\n      }\r\n  \r\n      // Set quiz as completed\r\n      setQuizCompleted(true);\r\n    }\r\n  \r\n    // Reset selected option index\r\n    setSelectedOptionIndex(null);\r\n  \r\n    // Send axios patch request to update question data\r\n    axios\r\n      .patch(\r\n        `${baseUrl}questionsUpdation/${quiz._id}/${quiz.questionsArray[currentQuestionIndex]._id}`,\r\n        {\r\n          peopleAnsweredCorrectly,\r\n          peopleAnsweredIncorrectly,\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          error.response &&\r\n          error.response.data &&\r\n          error.response.data.error\r\n        ) {\r\n          console.log(error);\r\n        }\r\n      });\r\n  };\r\n  \r\n\r\n  const handleNextOrSubmitPoll = () => {\r\n    if (quizCompleted) {\r\n      return;\r\n    }\r\n    let peopleAnsweredOption1 = 0;\r\n    let peopleAnsweredOption2 = 0;\r\n    let peopleAnsweredOption3 = 0;\r\n    let peopleAnsweredOption4 = 0;\r\n    if (selectedOptionIndex === 0) {\r\n      peopleAnsweredOption1 = 1;\r\n    }\r\n    if (selectedOptionIndex === 1) {\r\n      peopleAnsweredOption2 = 1;\r\n    }\r\n    if (selectedOptionIndex === 2) {\r\n      peopleAnsweredOption3 = 1;\r\n    }\r\n    if (selectedOptionIndex === 3) {\r\n      peopleAnsweredOption4 = 1;\r\n    }\r\n    setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n\r\n    const baseUrl = localStorage.getItem(\"baseUrl\");\r\n\r\n    axios\r\n      .patch(\r\n        `${baseUrl}questionsUpdation/${quiz._id}/${quiz.questionsArray[currentQuestionIndex]._id}`,\r\n        {\r\n          peopleAnsweredOption1,\r\n          peopleAnsweredOption2,\r\n          peopleAnsweredOption3,\r\n          peopleAnsweredOption4,\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          error.response &&\r\n          error.response.data &&\r\n          error.response.data.error\r\n        ) {\r\n          console.log(error);\r\n        }\r\n      });\r\n    setSelectedOptionIndex(null);\r\n    // If its last question\r\n    if (currentQuestionIndex === quiz.questionsArray.length - 1) {\r\n      setQuizCompleted(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Set up a timer interval\r\n    // setInterval: This function sets up a recurring timer interval. It takes a \r\n    // callback function and a duration in milliseconds.\r\n    const timerInterval = setInterval(() => {\r\n      // Update the timer state\r\n      setTimer((prevTimer) => {\r\n        if (prevTimer > 0) {\r\n          // If the timer is greater than 0, decrement it by 1\r\n          return prevTimer - 1;\r\n        } else {\r\n          // If the timer reaches 0, set the timer active state to true\r\n          setTimerActive(true);\r\n          // Call handleNextOrSubmitQna function to move to the next question or submit the quiz\r\n          handleNextOrSubmitQna();\r\n          return 0;\r\n        }\r\n      });\r\n    }, 1000); // Update the timer every second\r\n  \r\n    // Clean up function\r\n    return () => {\r\n      // Clear the timer interval\r\n      clearInterval(timerInterval);\r\n      // Set the timer active state to false\r\n      setTimerActive(false);\r\n    };\r\n    // This ensures that the effect runs when any of these values change\r\n    // eslint-disable-next-line\r\n  }, [timer, currentQuestionIndex, quizCompleted]);\r\n  \r\n  useEffect(() => {\r\n    if (quiz && quiz.questionsArray && quiz.questionsArray.length > 0) {\r\n      setTimer(\r\n        quiz.timer === \"5 sec\"\r\n          ? 5\r\n          : quiz.timer === \"10 sec\"\r\n          ? 10\r\n          : quiz.timer === \"OFF\" || quiz.type === \"Poll Type\"\r\n          ? Infinity\r\n          : 0\r\n      );\r\n    }\r\n  }, [currentQuestionIndex, quiz]);\r\n\r\n  const handleOptionSelect = (index) => {\r\n    setSelectedOptionIndex(index);\r\n  };\r\n\r\n  if (!quiz) {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1>Please Wait to load the Quiz !</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (quizCompleted) {\r\n    return (\r\n      <CompletedQuiz\r\n        type={quiz.type}\r\n        correctAnswer={correctAnswersCount}\r\n        totalQuestions={quiz.questionsArray.length}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.box}>\r\n        {quiz && quiz.questionsArray && quiz.questionsArray.length > 0 && (\r\n          <div>\r\n            <div className={styles.section1}>\r\n              <p className={styles.questionNo}>\r\n                0{currentQuestionIndex + 1}/0{quiz.questionsArray.length}\r\n              </p>\r\n\r\n              {quiz.timer !== \"OFF\" && quiz.type !== \"Poll Type\" && (\r\n                <p className={styles.timer}>\r\n                  00:{timer < 10 ? `0${timer}` : timer}s\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            <div className={styles.section2}>\r\n              <p className={styles.question}>\r\n                {quiz.questionsArray[currentQuestionIndex].question}\r\n              </p>\r\n            </div>\r\n\r\n            <div className={styles.section3}>\r\n              {quiz.questionsArray[currentQuestionIndex].optionValues.map(\r\n                (option, index) => (\r\n                  <div\r\n                    onClick={() => handleOptionSelect(index)}\r\n                    style={{\r\n                      border:\r\n                        selectedOptionIndex === index\r\n                          ? \"4px solid #5076FF\"\r\n                          : \"\",\r\n                    }}\r\n                    className={\r\n                      quiz.questionsArray[currentQuestionIndex].optionType ===\r\n                      \"Text\"\r\n                        ? styles.optionBoxText\r\n                        : quiz.questionsArray[currentQuestionIndex]\r\n                            .optionType === \"ImageUrl\"\r\n                        ? styles.optionTypeImage\r\n                        : quiz.questionsArray[currentQuestionIndex]\r\n                            .optionType === \"TextAndImageUrl\"\r\n                        ? styles.optionTextAndImage\r\n                        : \"\"\r\n                    }\r\n                  >\r\n                    {quiz.questionsArray[currentQuestionIndex].optionType ===\r\n                      \"Text\" && (\r\n                      <p className={styles.textType}> {option.value}</p>\r\n                    )}\r\n\r\n                    {quiz.questionsArray[currentQuestionIndex].optionType ===\r\n                      \"ImageUrl\" && (\r\n                      <img\r\n                        className={styles.imageType}\r\n                        src={option.imageUrl}\r\n                        alt=\"optionImage\"\r\n                      />\r\n                    )}\r\n\r\n                    {quiz.questionsArray[currentQuestionIndex].optionType ===\r\n                      \"TextAndImageUrl\" && (\r\n                      <div className={styles.thirdType}>\r\n                        <p className={styles.thirdTypeText}>{option.value}</p>\r\n                        <img\r\n                          className={styles.thirdTypeImage}\r\n                          src={option.imageUrl}\r\n                          alt=\"optionImage\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )\r\n              )}\r\n            </div>\r\n\r\n            <div className={styles.section4}>\r\n              <button\r\n                onClick={() => {\r\n                  if (quiz.type === \"Poll Type\") {\r\n                    handleNextOrSubmitPoll();\r\n                  } else {\r\n                    handleNextOrSubmitQna();\r\n                  }\r\n                }}\r\n                className={styles.nextBtn}\r\n              >\r\n                {currentQuestionIndex < quiz.questionsArray.length - 1\r\n                  ? \"NEXT\"\r\n                  : \"SUBMIT\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiveQuizInterface;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}