{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pvnl0\\\\Desktop\\\\Cuvette\\\\Quiz App\\\\quiz-app-frontend\\\\src\\\\components\\\\Questions\\\\AddQuestionsPopup.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport plusicon from \"../../images/plusicon.png\";\nimport smallcrossicon from \"../../images/smallcrossicon.png\";\nimport EachQuestion from \"./EachQuestion\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport styles from \"./AddQuestions.module.css\";\nimport styles1 from \"../CommonStyles.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddQuestionsPopup({\n  setIsAddQuestionsPopupOpen,\n  setIsQuizPublishedPopupOpen,\n  quizName,\n  quizType,\n  setEditableQuiz,\n  editableQuiz,\n  setNewlyCreatedQuizId\n}) {\n  _s();\n  // By default there will be 1st question\n  const [selectedQuestion, setSelectedQuestion] = useState(1);\n  const [questions, setQuestions] = useState(() => {\n    if (editableQuiz) {\n      // Create an array with a length equal to the number of questions in the 'editableQuiz'\n      // Array.from() creates a new, shallow-copied Array instance from an array-like or iterable object.\n      return Array.from({\n        length: editableQuiz.questionsArray.length\n      }, (_, index) => index + 1);\n    } else {\n      return [1];\n    }\n  });\n  const [error, setError] = useState(\"\");\n  const [questionsArray, setQuestionsArray] = useState(() => {\n    // Check if `editableQuiz` exists\n    if (editableQuiz) {\n      // If `editableQuiz`exists initialize `questionsArray` to editableQuiz questionsArray\n      return editableQuiz.questionsArray.map((question, index) => ({\n        ...question,\n        questionNo: index + 1\n      }));\n    } else {\n      // If `editableQuiz` doesnt exist initialize `questionsArray` state with an array containing a single default question\n      return [{\n        questionNo: 1,\n        question: \"\",\n        optionType: \"\",\n        optionValues: [],\n        correctAnswer: \"\"\n      }];\n    }\n  });\n  const [timer, setTimer] = useState(null);\n\n  // Updating the Timer\n  const handleTimerChange = newTimer => {\n    setTimer(newTimer, () => {\n      setNewQuiz(prevNewQuiz => ({\n        ...prevNewQuiz,\n        timer: newTimer\n      }));\n    });\n  };\n\n  // Creating Quiz\n  const [newQuiz, setNewQuiz] = useState({\n    name: quizName,\n    type: quizType,\n    timer: timer,\n    impressions: 0,\n    questionsArray\n  });\n  const addQuestion = () => {\n    // Checking whether previous question is valid or not\n    const prevQuestion = questionsArray[questionsArray.length - 1];\n    if (prevQuestion && !prevQuestion.question) {\n      setError(\"Please enter the question\");\n      return;\n    }\n    if (prevQuestion && !prevQuestion.optionType) {\n      setError(\"Please select the option type\");\n      return;\n    }\n    if (prevQuestion && prevQuestion.optionValues.length === 0) {\n      setError(\"Please enter the options\");\n      return;\n    }\n    if (questions.length === 5) {\n      setError(\"Maximum only 5 questions\");\n      return;\n    }\n    if (questions.length < 5) {\n      const newQuestionNumber = questions.length + 1;\n\n      // Creating a new question\n      const newQuestion = {\n        questionNo: newQuestionNumber,\n        question: \"\",\n        optionType: \"\",\n        optionValues: [],\n        correctAnswer: \"\"\n      };\n\n      // Adding current questionNo to questions Array\n      setQuestions([...questions, newQuestionNumber]);\n\n      // Adding whole current question to questionsArray Array\n      setQuestionsArray(prevQuestionsArray => [...prevQuestionsArray, newQuestion]);\n\n      // Set selected question as current question\n      setSelectedQuestion(newQuestionNumber);\n\n      // Adding this new question in NewQuiz also\n      setNewQuiz(prevNewQuiz => ({\n        ...prevNewQuiz,\n        questionsArray: [...prevNewQuiz.questionsArray, newQuestion]\n      }));\n\n      // Adding this new question in UpdatedQuiz also\n      setUpdatedQuiz(prevUpdatedQuiz => ({\n        ...prevUpdatedQuiz,\n        questionsArray: [...prevUpdatedQuiz.questionsArray, newQuestion]\n      }));\n    }\n  };\n\n  // When any question is clicked set selected question as the clicked question\n  const handleQuestionClick = questionNumber => {\n    setSelectedQuestion(questionNumber);\n  };\n  const handleDeleteQuestion = questionNumber => {\n    const remainingQuestions = questions.filter(q => q !== questionNumber);\n    setQuestions(remainingQuestions);\n    const renumberedQuestions = remainingQuestions.map((_, index) => index + 1);\n    setSelectedQuestion(renumberedQuestions.length > 0 ? renumberedQuestions[0] : 1);\n\n    // Removing the question from questionsArray where questionNo is questionNumber\n    const updatedQuestionsArray = questionsArray.filter(q => q && q.questionNo !== questionNumber);\n    setQuestionsArray(updatedQuestionsArray);\n\n    // Removing question in NewQuiz also\n    setNewQuiz(prevNewQuiz => ({\n      ...prevNewQuiz,\n      questionsArray: updatedQuestionsArray\n    }));\n\n    // Removing question in UpdatedQuiz also\n    setUpdatedQuiz(prevUpdatedQuiz => ({\n      ...prevUpdatedQuiz,\n      questionsArray: updatedQuestionsArray\n    }));\n  };\n  const handleCancelBtn = () => {\n    setEditableQuiz(null);\n    setIsAddQuestionsPopupOpen(false);\n  };\n\n  // Updating NewQuiz whenever timer or questionsArray is changing\n  useEffect(() => {\n    setNewQuiz(prevNewQuiz => ({\n      ...prevNewQuiz,\n      timer: timer,\n      questionsArray: [...questionsArray]\n    }));\n  }, [timer, questionsArray]);\n  const token = localStorage.getItem(\"jwtToken\");\n  const headers = {\n    Authorization: `Bearer ${token}`\n  };\n  const userId = localStorage.getItem(\"userId\");\n  const baseUrl = localStorage.getItem(\"baseUrl\");\n\n  // Create Quiz Api\n  const handleCreateQuizBtn = () => {\n    axios.post(`${baseUrl}quizCreation/${userId}`, newQuiz, {\n      headers\n    }).then(response => {\n      setError(\"\");\n      toast.success(response.data.message);\n      setNewlyCreatedQuizId(response.data.id);\n      setIsQuizPublishedPopupOpen(true);\n      setIsAddQuestionsPopupOpen(false);\n    }).catch(error => {\n      if (error.response && error.response.data && error.response.data.error) {\n        setError(error.response.data.error);\n      } else {\n        setError(\"An error occurred  while creating quiz\");\n      }\n      console.log(error);\n    });\n  };\n  const handleQuestionChange = (questionNumber, newQuestion) => {\n    // Update the questionsArray state with the new question\n    setQuestionsArray(prevQuestionsArray => {\n      const updatedQuestionsArray = [...prevQuestionsArray];\n      const questionIndex = questionNumber - 1; // Adjust index to 0-based\n      updatedQuestionsArray[questionIndex] = newQuestion;\n      return updatedQuestionsArray;\n    });\n\n    // Update the newQuiz state with the new question\n    setNewQuiz(prevNewQuiz => {\n      const updatedQuestionsArray = [...prevNewQuiz.questionsArray];\n      const questionIndex = questionNumber - 1; // Adjust index to 0-based\n      updatedQuestionsArray[questionIndex] = newQuestion;\n      return {\n        ...prevNewQuiz,\n        questionsArray: updatedQuestionsArray\n      };\n    });\n\n    // Update the updatedQuiz state with the new question\n    setUpdatedQuiz(prevUpdatedQuiz => {\n      const updatedQuestionsArray2 = [...prevUpdatedQuiz.questionsArray];\n      const questionIndex2 = questionNumber - 1; // Adjust index to 0-based\n      updatedQuestionsArray2[questionIndex2] = newQuestion;\n      return {\n        ...prevUpdatedQuiz,\n        questionsArray: updatedQuestionsArray2\n      };\n    });\n  };\n  const [updatedQuiz, setUpdatedQuiz] = useState({\n    questionsArray\n  });\n  const quizId = editableQuiz ? editableQuiz._id : null;\n\n  // Update Quiz Api\n  const handleUpdateQuizBtn = () => {\n    axios.patch(`${baseUrl}quizUpdation/${userId}/${quizId}`, updatedQuiz, {\n      headers\n    }).then(response => {\n      toast.success(response.data.message);\n      setEditableQuiz(null);\n      setIsAddQuestionsPopupOpen(false);\n    }).catch(error => {\n      if (error.response && error.response.data && error.response.data.error) {\n        setError(error.response.data.error);\n      } else {\n        setError(\"An error occurred while updating quiz\");\n      }\n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.addQuestionsPopup,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.section1,\n      children: [questions.map((questionNumber, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.relativePosition,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => handleQuestionClick(questionNumber),\n          style: {\n            border: selectedQuestion === questionNumber ? \"2px solid #60B84B\" : \"\"\n          },\n          className: styles.questions,\n          children: [index + 1, index !== 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n            onClick: () => handleDeleteQuestion(questionNumber),\n            src: smallcrossicon,\n            alt: \"smallcrossicon\",\n            className: styles.crossIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), index === questions.length - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            style: {\n              cursor: \"pointer\"\n            },\n            onClick: addQuestion,\n            src: plusicon,\n            alt: \"plusicon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }, this)]\n      }, questionNumber, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.section1RightSide,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.section1Text,\n          children: \"Max 5 questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), questions.map(questionNumber =>\n    /*#__PURE__*/\n    // Iterating over each question in the 'questions' array\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(EachQuestion\n      // Passing questionNumber as a prop to EachQuestion component\n      , {\n        questionNumber: questionNumber\n        // Passing 'selected' prop to EachQuestion, indicating if it's selected\n        ,\n        selected: selectedQuestion === questionNumber\n        // Finding the question object in questionsArray matching the questionNumber\n        ,\n        questionsArray: questionsArray.find(q => q.questionNo === questionNumber)\n        // Passing a callback to handle question changes\n        ,\n        onQuestionChange: newQuestion => handleQuestionChange(questionNumber, newQuestion)\n        // Passing a function to handle timer changes\n        ,\n        onTimerChange: handleTimerChange\n        // Passing the quizType prop to EachQuestion\n        ,\n        quizType: quizType\n        // Passing the editableQuiz prop to EachQuestion\n        ,\n        editableQuiz: editableQuiz\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this)\n    }, questionNumber, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this)), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.error,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles1.error,\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.btnSection,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancelBtn,\n        className: styles.cancelBtn,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), editableQuiz === null ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateQuizBtn,\n        className: styles.createOrUpdateBtn,\n        children: \"Create Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateQuizBtn,\n        className: styles.createOrUpdateBtn,\n        children: \"Update Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n}\n_s(AddQuestionsPopup, \"cHn5UZUmeB0V1DHDpXJCQbCi60I=\");\n_c = AddQuestionsPopup;\nexport default AddQuestionsPopup;\nvar _c;\n$RefreshReg$(_c, \"AddQuestionsPopup\");","map":{"version":3,"names":["React","useEffect","useState","plusicon","smallcrossicon","EachQuestion","axios","toast","styles","styles1","jsxDEV","_jsxDEV","AddQuestionsPopup","setIsAddQuestionsPopupOpen","setIsQuizPublishedPopupOpen","quizName","quizType","setEditableQuiz","editableQuiz","setNewlyCreatedQuizId","_s","selectedQuestion","setSelectedQuestion","questions","setQuestions","Array","from","length","questionsArray","_","index","error","setError","setQuestionsArray","map","question","questionNo","optionType","optionValues","correctAnswer","timer","setTimer","handleTimerChange","newTimer","setNewQuiz","prevNewQuiz","newQuiz","name","type","impressions","addQuestion","prevQuestion","newQuestionNumber","newQuestion","prevQuestionsArray","setUpdatedQuiz","prevUpdatedQuiz","handleQuestionClick","questionNumber","handleDeleteQuestion","remainingQuestions","filter","q","renumberedQuestions","updatedQuestionsArray","handleCancelBtn","token","localStorage","getItem","headers","Authorization","userId","baseUrl","handleCreateQuizBtn","post","then","response","success","data","message","id","catch","console","log","handleQuestionChange","questionIndex","updatedQuestionsArray2","questionIndex2","updatedQuiz","quizId","_id","handleUpdateQuizBtn","patch","className","addQuestionsPopup","children","section1","relativePosition","onClick","style","border","src","alt","crossIcon","fileName","_jsxFileName","lineNumber","columnNumber","cursor","section1RightSide","section1Text","selected","find","onQuestionChange","onTimerChange","btnSection","cancelBtn","createOrUpdateBtn","_c","$RefreshReg$"],"sources":["C:/Users/pvnl0/Desktop/Cuvette/Quiz App/quiz-app-frontend/src/components/Questions/AddQuestionsPopup.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport plusicon from \"../../images/plusicon.png\";\r\nimport smallcrossicon from \"../../images/smallcrossicon.png\";\r\nimport EachQuestion from \"./EachQuestion\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport styles from \"./AddQuestions.module.css\";\r\nimport styles1 from \"../CommonStyles.module.css\";\r\n\r\nfunction AddQuestionsPopup({\r\n  setIsAddQuestionsPopupOpen,\r\n  setIsQuizPublishedPopupOpen,\r\n  quizName,\r\n  quizType,\r\n  setEditableQuiz,\r\n  editableQuiz,\r\n  setNewlyCreatedQuizId,\r\n}) {\r\n  // By default there will be 1st question\r\n  const [selectedQuestion, setSelectedQuestion] = useState(1);\r\n\r\n  const [questions, setQuestions] = useState(() => {\r\n    if (editableQuiz) {\r\n      // Create an array with a length equal to the number of questions in the 'editableQuiz'\r\n      // Array.from() creates a new, shallow-copied Array instance from an array-like or iterable object.\r\n      return Array.from(\r\n        { length: editableQuiz.questionsArray.length },\r\n        (_, index) => index + 1\r\n      );\r\n    } else {\r\n      return [1];\r\n    }\r\n  });\r\n\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const [questionsArray, setQuestionsArray] = useState(() => {\r\n    // Check if `editableQuiz` exists\r\n    if (editableQuiz) {\r\n      // If `editableQuiz`exists initialize `questionsArray` to editableQuiz questionsArray\r\n      return editableQuiz.questionsArray.map((question, index) => ({\r\n        ...question,\r\n        questionNo: index + 1,\r\n      }));\r\n    } else {\r\n      // If `editableQuiz` doesnt exist initialize `questionsArray` state with an array containing a single default question\r\n      return [\r\n        {\r\n          questionNo: 1,\r\n          question: \"\",\r\n          optionType: \"\",\r\n          optionValues: [],\r\n          correctAnswer: \"\",\r\n        },\r\n      ];\r\n    }\r\n  });\r\n\r\n  const [timer, setTimer] = useState(null);\r\n\r\n  // Updating the Timer\r\n  const handleTimerChange = (newTimer) => {\r\n    setTimer(newTimer, () => {\r\n      setNewQuiz((prevNewQuiz) => ({\r\n        ...prevNewQuiz,\r\n        timer: newTimer,\r\n      }));\r\n    });\r\n  };\r\n\r\n  // Creating Quiz\r\n  const [newQuiz, setNewQuiz] = useState({\r\n    name: quizName,\r\n    type: quizType,\r\n    timer: timer,\r\n    impressions: 0,\r\n    questionsArray,\r\n  });\r\n\r\n  const addQuestion = () => {\r\n    // Checking whether previous question is valid or not\r\n    const prevQuestion = questionsArray[questionsArray.length - 1];\r\n    if (prevQuestion && !prevQuestion.question) {\r\n      setError(\"Please enter the question\");\r\n      return;\r\n    }\r\n\r\n    if (prevQuestion && !prevQuestion.optionType) {\r\n      setError(\"Please select the option type\");\r\n      return;\r\n    }\r\n\r\n    if (prevQuestion && prevQuestion.optionValues.length === 0) {\r\n      setError(\"Please enter the options\");\r\n      return;\r\n    }\r\n\r\n    if (questions.length === 5) {\r\n      setError(\"Maximum only 5 questions\");\r\n      return;\r\n    }\r\n\r\n    if (questions.length < 5) {\r\n      const newQuestionNumber = questions.length + 1;\r\n\r\n      // Creating a new question\r\n      const newQuestion = {\r\n        questionNo: newQuestionNumber,\r\n        question: \"\",\r\n        optionType: \"\",\r\n        optionValues: [],\r\n        correctAnswer: \"\",\r\n      };\r\n\r\n      // Adding current questionNo to questions Array\r\n      setQuestions([...questions, newQuestionNumber]);\r\n\r\n      // Adding whole current question to questionsArray Array\r\n      setQuestionsArray((prevQuestionsArray) => [\r\n        ...prevQuestionsArray,\r\n        newQuestion,\r\n      ]);\r\n\r\n      // Set selected question as current question\r\n      setSelectedQuestion(newQuestionNumber);\r\n\r\n      // Adding this new question in NewQuiz also\r\n      setNewQuiz((prevNewQuiz) => ({\r\n        ...prevNewQuiz,\r\n        questionsArray: [...prevNewQuiz.questionsArray, newQuestion],\r\n      }));\r\n\r\n      // Adding this new question in UpdatedQuiz also\r\n      setUpdatedQuiz((prevUpdatedQuiz) => ({\r\n        ...prevUpdatedQuiz,\r\n        questionsArray: [...prevUpdatedQuiz.questionsArray, newQuestion],\r\n      }));\r\n    }\r\n  };\r\n\r\n  // When any question is clicked set selected question as the clicked question\r\n  const handleQuestionClick = (questionNumber) => {\r\n    setSelectedQuestion(questionNumber);\r\n  };\r\n\r\n  const handleDeleteQuestion = (questionNumber) => {\r\n    const remainingQuestions = questions.filter((q) => q !== questionNumber);\r\n\r\n    setQuestions(remainingQuestions);\r\n    const renumberedQuestions = remainingQuestions.map((_, index) => index + 1);\r\n\r\n    setSelectedQuestion(\r\n      renumberedQuestions.length > 0 ? renumberedQuestions[0] : 1\r\n    );\r\n\r\n    // Removing the question from questionsArray where questionNo is questionNumber\r\n    const updatedQuestionsArray = questionsArray.filter(\r\n      (q) => q && q.questionNo !== questionNumber\r\n    );\r\n    setQuestionsArray(updatedQuestionsArray);\r\n\r\n    // Removing question in NewQuiz also\r\n    setNewQuiz((prevNewQuiz) => ({\r\n      ...prevNewQuiz,\r\n      questionsArray: updatedQuestionsArray,\r\n    }));\r\n\r\n    // Removing question in UpdatedQuiz also\r\n    setUpdatedQuiz((prevUpdatedQuiz) => ({\r\n      ...prevUpdatedQuiz,\r\n      questionsArray: updatedQuestionsArray,\r\n    }));\r\n  };\r\n\r\n  const handleCancelBtn = () => {\r\n    setEditableQuiz(null);\r\n    setIsAddQuestionsPopupOpen(false);\r\n  };\r\n\r\n  // Updating NewQuiz whenever timer or questionsArray is changing\r\n  useEffect(() => {\r\n    setNewQuiz((prevNewQuiz) => ({\r\n      ...prevNewQuiz,\r\n      timer: timer,\r\n      questionsArray: [...questionsArray],\r\n    }));\r\n  }, [timer, questionsArray]);\r\n\r\n  const token = localStorage.getItem(\"jwtToken\");\r\n\r\n  const headers = {\r\n    Authorization: `Bearer ${token}`,\r\n  };\r\n\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  const baseUrl = localStorage.getItem(\"baseUrl\");\r\n\r\n  // Create Quiz Api\r\n  const handleCreateQuizBtn = () => {\r\n    axios\r\n      .post(`${baseUrl}quizCreation/${userId}`, newQuiz, {\r\n        headers,\r\n      })\r\n      .then((response) => {\r\n        setError(\"\");\r\n        toast.success(response.data.message);\r\n        setNewlyCreatedQuizId(response.data.id);\r\n        setIsQuizPublishedPopupOpen(true);\r\n        setIsAddQuestionsPopupOpen(false);\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          error.response &&\r\n          error.response.data &&\r\n          error.response.data.error\r\n        ) {\r\n          setError(error.response.data.error);\r\n        } else {\r\n          setError(\"An error occurred  while creating quiz\");\r\n        }\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleQuestionChange = (questionNumber, newQuestion) => {\r\n    // Update the questionsArray state with the new question\r\n    setQuestionsArray((prevQuestionsArray) => {\r\n      const updatedQuestionsArray = [...prevQuestionsArray];\r\n      const questionIndex = questionNumber - 1; // Adjust index to 0-based\r\n      updatedQuestionsArray[questionIndex] = newQuestion;\r\n      return updatedQuestionsArray;\r\n    });\r\n\r\n    // Update the newQuiz state with the new question\r\n    setNewQuiz((prevNewQuiz) => {\r\n      const updatedQuestionsArray = [...prevNewQuiz.questionsArray];\r\n      const questionIndex = questionNumber - 1; // Adjust index to 0-based\r\n      updatedQuestionsArray[questionIndex] = newQuestion;\r\n\r\n      return {\r\n        ...prevNewQuiz,\r\n        questionsArray: updatedQuestionsArray,\r\n      };\r\n    });\r\n\r\n    // Update the updatedQuiz state with the new question\r\n    setUpdatedQuiz((prevUpdatedQuiz) => {\r\n      const updatedQuestionsArray2 = [...prevUpdatedQuiz.questionsArray];\r\n      const questionIndex2 = questionNumber - 1; // Adjust index to 0-based\r\n      updatedQuestionsArray2[questionIndex2] = newQuestion;\r\n\r\n      return {\r\n        ...prevUpdatedQuiz,\r\n        questionsArray: updatedQuestionsArray2,\r\n      };\r\n    });\r\n  };\r\n\r\n  const [updatedQuiz, setUpdatedQuiz] = useState({\r\n    questionsArray,\r\n  });\r\n\r\n  const quizId = editableQuiz ? editableQuiz._id : null;\r\n\r\n  // Update Quiz Api\r\n  const handleUpdateQuizBtn = () => {\r\n    axios\r\n      .patch(`${baseUrl}quizUpdation/${userId}/${quizId}`, updatedQuiz, {\r\n        headers,\r\n      })\r\n      .then((response) => {\r\n        toast.success(response.data.message);\r\n        setEditableQuiz(null);\r\n        setIsAddQuestionsPopupOpen(false);\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          error.response &&\r\n          error.response.data &&\r\n          error.response.data.error\r\n        ) {\r\n          setError(error.response.data.error);\r\n        } else {\r\n          setError(\"An error occurred while updating quiz\");\r\n        }\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.addQuestionsPopup}>\r\n      <div className={styles.section1}>\r\n        {questions.map((questionNumber, index) => (\r\n          <div key={questionNumber} className={styles.relativePosition}>\r\n            <p\r\n              onClick={() => handleQuestionClick(questionNumber)}\r\n              style={{\r\n                border:\r\n                  selectedQuestion === questionNumber\r\n                    ? \"2px solid #60B84B\"\r\n                    : \"\",\r\n              }}\r\n              className={styles.questions}\r\n            >\r\n              {index + 1}\r\n              {index !== 0 && (\r\n                <img\r\n                  onClick={() => handleDeleteQuestion(questionNumber)}\r\n                  src={smallcrossicon}\r\n                  alt=\"smallcrossicon\"\r\n                  className={styles.crossIcon}\r\n                />\r\n              )}\r\n            </p>\r\n            {/* plus icon is displayed only after last question */}\r\n            {index === questions.length - 1 && (\r\n              <span>\r\n                <img\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={addQuestion}\r\n                  src={plusicon}\r\n                  alt=\"plusicon\"\r\n                />\r\n              </span>\r\n            )}\r\n          </div>\r\n        ))}\r\n\r\n        <div className={styles.section1RightSide}>\r\n          <p className={styles.section1Text}>Max 5 questions</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* EachQuestion component */}\r\n\r\n      {questions.map((questionNumber) => (\r\n        // Iterating over each question in the 'questions' array\r\n        <div key={questionNumber}>\r\n          {/* Rendering a div for each question */}\r\n          <EachQuestion\r\n            // Passing questionNumber as a prop to EachQuestion component\r\n            questionNumber={questionNumber}\r\n            // Passing 'selected' prop to EachQuestion, indicating if it's selected\r\n            selected={selectedQuestion === questionNumber}\r\n            // Finding the question object in questionsArray matching the questionNumber\r\n            questionsArray={questionsArray.find(\r\n              (q) => q.questionNo === questionNumber\r\n            )}\r\n            // Passing a callback to handle question changes\r\n            onQuestionChange={(newQuestion) =>\r\n              handleQuestionChange(questionNumber, newQuestion)\r\n            }\r\n            // Passing a function to handle timer changes\r\n            onTimerChange={handleTimerChange}\r\n            // Passing the quizType prop to EachQuestion\r\n            quizType={quizType}\r\n            // Passing the editableQuiz prop to EachQuestion\r\n            editableQuiz={editableQuiz}\r\n          />\r\n        </div>\r\n      ))}\r\n\r\n      {error && (\r\n        <div className={styles.error}>\r\n          <p className={styles1.error}>{error}</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className={styles.btnSection}>\r\n        <button onClick={handleCancelBtn} className={styles.cancelBtn}>\r\n          Cancel\r\n        </button>\r\n        {editableQuiz === null ? (\r\n          <button\r\n            onClick={handleCreateQuizBtn}\r\n            className={styles.createOrUpdateBtn}\r\n          >\r\n            Create Quiz\r\n          </button>\r\n        ) : (\r\n          <button\r\n            onClick={handleUpdateQuizBtn}\r\n            className={styles.createOrUpdateBtn}\r\n          >\r\n            Update Quiz\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddQuestionsPopup;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}